require 'my_test_helper'
require 'curses'

class Cell
  attr_reader :x, :y, :state

  def initialize(x, y, state=:on)
    @x, @y, @state = x, y, state
  end

  def live?() ![:off, :dead, nil].member?(@state) end

  def eql?(other)
    return false unless other
    return false unless other.class == self.class
    self.x == other.x && self.y == other.y
  end

  def hash() [@x, @y, @state].hash end
end

class DeadCell < Cell
  def initialize(x, y) super(x, y, :off) end
  def live?()          false end
  def alive(state=:on) Cell.new(@x, @y, state) end
end

class World
  attr_reader :live_cells

  def initialize(*cells)
    @live_cells = cells
    @grid = {}
    update_grid cells
  end

  def dead_cells(offsets=@@moore_nbr_offs)
    @dead_cells ||= 
      begin
        ans = @live_cells.reduce(Set.new){ |acc, c|
          self.class.nbr(c.x, c.y, offsets).each do |x, y|
            acc << DeadCell.new(x, y)
          end
          acc
        }.to_a
        update_grid ans
        ans
      end
  end 

  def all_cells() live_cells + dead_cells end
  def at(x, y)    col=@grid[x] and col[y] end

  def tick
    new_cells = Set.new
    all_cells.each do |c|
      c_next = tick_cell(c)
      new_cells << c_next if c_next && c_next.live?
    end
    self.class.new *new_cells.to_a
  end

  def moore_nbr(cell)
    self.class.moore_nbr(cell.x, cell.y).map{|x, y| at(x, y)}.compact
  end

  private

  def update_grid(cells, owr=false) cells.each{|c| grid_add(c, owr)} end
  def grid_add(cell, owr=false)
    if owr
      (@grid[cell.x] ||= {})[cell.y] = cell 
    else
      (@grid[cell.x] ||= {})[cell.y] ||= cell 
    end
  end

  @@moore_nbr_offs = [[-1, -1], [0, -1], [1, -1],
                      [-1,  0],          [1,  0],
                      [-1,  1], [0,  1], [1,  1]]

  @@von_neumann_nbr_offs = [          [0, -1]         ,
                            [-1,  0],          [1,  0],
                                      [0,  1]         ]

  def self.moore_nbr(x, y)       nbr(x, y, @@moore_nbr_offs) end
  def self.von_neumann_nbr(x, y) nbr(x, y, @@von_neumann_nbr_offs) end
  def self.nbr(x, y, offsets)    offsets.map{|xx, yy| [x + xx, y + yy]} end
end

class GameOfLife < World
  def tick_cell(cell)
    mn = moore_nbr(cell)
    ln = mn.select(&:live?)
    if cell.live?
      (ln.size < 2 || ln.size > 3) ? nil : cell
    else
      ln.size == 3 ? cell.alive : nil
    end
  end
end

def norm(coords, x_off=0, y_off=0)
  min_x = coords.map{|x, y| x}.min
  min_y = coords.map{|x, y| y}.min
  coords.map{|x, y| Cell.new x - min_x + x_off, y - min_y + y_off}
end

def blinker
  [[1, 0], [1, 1], [1, 2]].map{|x, y| Cell.new(x, y)}
end
def pentomino
  [        [3, 2], [4, 2], 
   [2, 3], [3, 3], 
           [3, 4]        ].map{|x, y| Cell.new(x, y)}
end
def glider
  [        [3, 2], 
                   [4, 3], 
   [2, 4], [3, 4], [4, 4] ].map{|x, y| Cell.new(x, y)}
end

@@gun = [[6, -4], [4, -3], [6, -3], [-6, -2], [-5, -2], [2, -2], [3, -2], [16, -2],
         [17, -2], [-7, -1], [-3, -1], [2, -1], [3, -1], [16, -1], [17, -1], [-18, 0],
         [-17, 0], [-8, 0], [-2, 0], [2, 0], [3, 0], [-18, 1], [-17, 1], [-8, 1], [-4, 1],
         [-2, 1], [-1, 1], [4, 1], [6, 1], [-8, 2], [-2, 2], [6, 2], [-7, 3], [-3, 3],
         [-6, 4], [-5, 4]]

@@bigun = [[-14, -7], [-15, -6], [-14, -6], [-16, -5], [-15, -5], [-15, -4], [-14, -4],
           [-11, -4], [-10, -4], [13, -3], [13, -2], [14, -2], [23, -2], [24, -2], [14, -1],
           [15, -1], [23, -1], [24, -1], [-15, 0], [-14, 0], [-11, 0], [-10, 0], [9, 0],
           [10, 0], [13, 0], [14, 0], [-25, 1], [-24, 1], [-16, 1], [-15, 1], [-25, 2], 
           [-24, 2], [-15, 2], [-14, 2], [-14, 3], [9, 4], [10, 4], [13, 4], [14, 4],
           [14, 5], [15, 5], [13, 6], [14, 6], [13, 7]]

@@pulsar = [[-4, -6], [-3, -6], [-2, -6], [2, -6], [3, -6], [4, -6], [-6, -4], [-1, -4],
            [1, -4], [6, -4], [-6, -3], [-1, -3], [1, -3], [6, -3], [-6, -2], [-1, -2],
            [1, -2], [6, -2], [-4, -1], [-3, -1], [-2, -1], [2, -1], [3, -1], [4, -1],
            [-4, 1], [-3, 1], [-2, 1], [2, 1], [3, 1], [4, 1], [-6, 2], [-1, 2], [1, 2],
            [6, 2], [-6, 3], [-1, 3], [1, 3], [6, 3], [-6, 4], [-1, 4], [1, 4], [6, 4],
            [-4, 6], [-3, 6], [-2, 6], [2, 6], [3, 6], [4, 6]]

@@kokgalaxy = [[-26, -18], [-23, -18], [-21, -18], [-28, -17], [-27, -17], [-25, -17],
               [-23, -17], [-22, -17], [-21, -17], [-27, -16], [-20, -16], [-28, -15],
               [-27, -15], [-21, -15], [-27, -13], [-21, -13], [-20, -13], [-28, -12],
               [-21, -12], [-27, -11], [-26, -11], [-25, -11], [-23, -11], [-21, -11],
               [-20, -11],[-27, -10],[-25, -10],[-22, -10]]

@@queen_bee_shuttle = [[-2, -4], [-4, -3], [-2, -3], [-5, -2], [-3, -2], [-11, -1], 
                       [-10, -1], [-6, -1], [-3, -1], [9, -1], [10, -1], [-11, 0], 
                       [-10, 0], [-5, 0], [-3, 0], [9, 0], [10, 0], [-4, 1], [-2, 1], 
                       [-2, 2]]

@@gunstar = [[-34, -74], [-33, -74], [-34, -73], [-33, -73], [-34, -72], [-33, -72], [-34, -71], [-35, -70], [-33, -70], [-35, -69], [-33, -69], [-32, -69], [-28, -67], [-27, -67], [-34, -66], [-33, -66], [-28, -66], [-27, -66], [-34, -65], [-33, -65], [-14, -63], [13, -63], [14, -63], [-24, -62], [-23, -62], [-14, -62], [-13, -62], [-12, -62], [13, -62], [-24, -61], [-22, -61], [-11, -61], [11, -61], [13, -61], [-24, -60], [-12, -60], [-11, -60], [5, -60], [11, -60], [12, -60], [17, -60], [18, -60], [4, -59], [5, -59], [17, -59], [18, -59], [-23, -58], [-22, -58], [4, -58], [6, -58], [-27, -57], [-23, -57], [-20, -57], [18, -57], [-28, -56], [-25, -56], [-23, -56], [-22, -56], [-21, -56], [17, -56], [19, -56], [-28, -55], [-27, -55], [-26, -55], [-24, -55], [16, -55], [19, -55], [-34, -54], [-33, -54], [-27, -54], [-25, -54], [-24, -54], [-23, -54], [15, -54], [18, -54], [-34, -53], [-33, -53], [-21, -53], [-34, -52], [-33, -52], [-10, -52], [-9, -52], [15, -52], [18, -52], [-33, -51], [-10, -51], [-9, -51], [17, -51], [18, -51], [-34, -50], [-32, -50], [-35, -49], [-34, -49], [-32, -49], [-19, -49], [-18, -49], [-17, -49], [-19, -48], [-18, -47], [-34, -46], [-33, -46], [-34, -45], [-33, -45], [25, -45], [26, -45], [27, -45], [-1, -43], [0, -43], [21, -43], [22, -43], [23, -43], [25, -43], [28, -43], [0, -42], [8, -42], [9, -42], [19, -42], [21, -42], [22, -42], [23, -42], [-3, -41], [-2, -41], [-1, -41], [8, -41], [9, -41], [18, -41], [25, -41], [26, -41], [27, -41], [-3, -40], [18, -40], [19, -40], [21, -38], [22, -38], [13, -37], [14, -37], [24, -37], [25, -37], [13, -36], [14, -36], [22, -36], [24, -36], [-31, -35], [-30, -35], [23, -35], [49, -35], [69, -35], [70, -35], [-31, -34], [-30, -34], [45, -34], [46, -34], [49, -34], [50, -34], [52, -34], [53, -34], [54, -34], [65, -34], [66, -34], [71, -34], [72, -34], [73, -34], [74, -34], [28, -33], [29, -33], [45, -33], [46, -33], [51, -33], [52, -33], [53, -33], [54, -33], [65, -33], [66, -33], [69, -33], [70, -33], [72, -33], [73, -33], [74, -33], [10, -32], [11, -32], [27, -32], [28, -32], [29, -32], [49, -32], [50, -32], [69, -32], [-31, -31], [-30, -31], [-29, -31], [6, -31], [7, -31], [10, -31], [11, -31], [14, -31], [15, -31], [26, -31], [28, -31], [31, -31], [34, -31], [35, -31], [-30, -30], [-29, -30], [6, -30], [8, -30], [11, -30], [14, -30], [15, -30], [26, -30], [27, -30], [30, -30], [31, -30], [34, -30], [35, -30], [-33, -29], [-32, -29], [7, -29], [8, -29], [9, -29], [30, -29], [31, -29], [-43, -28], [-33, -28], [-32, -28], [-31, -28], [8, -28], [9, -28], [55, -28], [56, -28], [66, -28], [67, -28], [-45, -27], [-41, -27], [-32, -27], [-30, -27], [54, -27], [55, -27], [57, -27], [66, -27], [67, -27], [-45, -26], [-41, -26], [-31, -26], [-30, -26], [55, -26], [-45, -25], [-43, -25], [-41, -25], [-37, -25], [54, -25], [56, -25], [-37, -24], [-36, -24], [54, -24], [55, -24], [60, -24], [61, -24], [62, -24], [-43, -23], [-42, -23], [-35, -23], [54, -23], [56, -23], [57, -23], [58, -23], [62, -23], [-43, -22], [-42, -22], [-38, -22], [-36, -22], [56, -22], [58, -22], [61, -22], [-43, -21], [-42, -21], [-38, -21], [53, -21], [56, -21], [57, -20], [-56, -19], [-55, -19], [-42, -19], [-40, -19], [-13, -19], [48, -19], [49, -19], [-60, -18], [-59, -18], [-57, -18], [-54, -18], [-52, -18], [-51, -18], [-41, -18], [-40, -18], [-13, -18], [-11, -18], [47, -18], [49, -18], [-60, -17], [-59, -17], [-56, -17], [-51, -17], [-13, -17], [-12, -17], [49, -17], [-55, -16], [-54, -15], [-52, -15], [-31, -15], [-30, -15], [-63, -14], [-37, -14], [-36, -14], [-31, -14], [-30, -14], [62, -14], [63, -14], [-63, -13], [-62, -13], [-61, -13], [-37, -13], [-36, -13], [17, -13], [18, -13], [19, -13], [62, -13], [-60, -12], [17, -12], [60, -12], [62, -12], [-61, -11], [-60, -11], [-32, -11], [-31, -11], [-30, -11], [18, -11], [60, -11], [61, -11], [-32, -10], [-31, -10], [51, -10], [52, -10], [-42, -9], [-41, -9], [-29, -9], [-28, -9], [51, -9], [52, -9], [-42, -8], [-41, -8], [-30, -8], [-29, -8], [-28, -8], [-31, -7], [-29, -7], [-58, -6], [-31, -6], [-30, -6], [-60, -5], [-59, -5], [-59, -4], [-58, -4], [40, -3], [41, -3], [41, -2], [41, -1], [43, -1], [-43, 0], [-42, 0], [42, 0], [43, 0], [-43, 1], [-41, 1], [-41, 2], [-41, 3], [-40, 3], [58, 4], [59, 4], [59, 5], [60, 5], [30, 6], [31, 6], [58, 6], [29, 7], [31, 7], [28, 8], [29, 8], [30, 8], [41, 8], [42, 8], [-52, 9], [-51, 9], [28, 9], [29, 9], [41, 9], [42, 9], [-52, 10], [-51, 10], [31, 10], [32, 10], [-61, 11], [-60, 11], [-18, 11], [30, 11], [31, 11], [32, 11], [60, 11], [61, 11], [-62, 12], [-60, 12], [-17, 12], [60, 12], [-62, 13], [-19, 13], [-18, 13], [-17, 13], [36, 13], [37, 13], [61, 13], [62, 13], [63, 13], [-63, 14], [-62, 14], [30, 14], [31, 14], [36, 14], [37, 14], [63, 14], [30, 15], [31, 15], [52, 15], [54, 15], [55, 16], [-49, 17], [12, 17], [13, 17], [51, 17], [56, 17], [59, 17], [60, 17], [-49, 18], [-47, 18], [11, 18], [13, 18], [40, 18], [41, 18], [51, 18], [52, 18], [54, 18], [57, 18], [59, 18], [60, 18], [-49, 19], [-48, 19], [13, 19], [40, 19], [42, 19], [55, 19], [56, 19], [-57, 20], [-56, 21], [-53, 21], [38, 21], [42, 21], [43, 21], [-61, 22], [-58, 22], [-56, 22], [36, 22], [38, 22], [42, 22], [43, 22], [-62, 23], [-58, 23], [-57, 23], [-56, 23], [-54, 23], [35, 23], [42, 23], [43, 23], [-62, 24], [-61, 24], [-60, 24], [-55, 24], [-54, 24], [36, 24], [37, 24], [-56, 25], [-54, 25], [37, 25], [41, 25], [43, 25], [45, 25], [-55, 26], [30, 26], [31, 26], [41, 26], [45, 26], [-67, 27], [-66, 27], [-57, 27], [-55, 27], [-54, 27], [30, 27], [32, 27], [41, 27], [45, 27], [-67, 28], [-66, 28], [-56, 28], [-55, 28], [-9, 28], [-8, 28], [31, 28], [32, 28], [33, 28], [43, 28], [-31, 29], [-30, 29], [-9, 29], [-8, 29], [-7, 29], [32, 29], [33, 29], [-35, 30], [-34, 30], [-31, 30], [-30, 30], [-27, 30], [-26, 30], [-15, 30], [-14, 30], [-11, 30], [-8, 30], [-6, 30], [29, 30], [30, 30], [-35, 31], [-34, 31], [-31, 31], [-28, 31], [-26, 31], [-15, 31], [-14, 31], [-11, 31], [-10, 31], [-7, 31], [-6, 31], [29, 31], [30, 31], [31, 31], [-69, 32], [-50, 32], [-49, 32], [-29, 32], [-28, 32], [-27, 32], [-11, 32], [-10, 32], [-74, 33], [-73, 33], [-72, 33], [-70, 33], [-69, 33], [-66, 33], [-65, 33], [-54, 33], [-53, 33], [-52, 33], [-51, 33], [-46, 33], [-45, 33], [-29, 33], [-28, 33], [-74, 34], [-73, 34], [-72, 34], [-71, 34], [-66, 34], [-65, 34], [-54, 34], [-53, 34], [-52, 34], [-50, 34], [-49, 34], [-46, 34], [-45, 34], [30, 34], [31, 34], [-70, 35], [-69, 35], [-49, 35], [-23, 35], [30, 35], [31, 35], [-24, 36], [-22, 36], [-14, 36], [-13, 36], [-25, 37], [-24, 37], [-14, 37], [-13, 37], [-22, 38], [-21, 38], [-19, 40], [-18, 40], [3, 40], [-27, 41], [-26, 41], [-25, 41], [-18, 41], [-9, 41], [-8, 41], [1, 41], [2, 41], [3, 41], [-23, 42], [-22, 42], [-21, 42], [-19, 42], [-9, 42], [-8, 42], [0, 42], [-28, 43], [-25, 43], [-23, 43], [-22, 43], [-21, 43], [0, 43], [1, 43], [-27, 45], [-26, 45], [-25, 45], [33, 45], [34, 45], [33, 46], [34, 46], [18, 47], [19, 48], [17, 49], [18, 49], [19, 49], [32, 49], [34, 49], [35, 49], [32, 50], [34, 50], [-18, 51], [-17, 51], [9, 51], [10, 51], [33, 51], [-18, 52], [-15, 52], [9, 52], [10, 52], [33, 52], [34, 52], [21, 53], [33, 53], [34, 53], [-18, 54], [-15, 54], [23, 54], [24, 54], [25, 54], [27, 54], [33, 54], [34, 54], [-19, 55], [-16, 55], [24, 55], [26, 55], [27, 55], [28, 55], [-19, 56], [-17, 56], [21, 56], [22, 56], [23, 56], [25, 56], [28, 56], [-18, 57], [20, 57], [23, 57], [27, 57], [-6, 58], [-4, 58], [22, 58], [23, 58], [-18, 59], [-17, 59], [-5, 59], [-4, 59], [-18, 60], [-17, 60], [-12, 60], [-11, 60], [-5, 60], [11, 60], [12, 60], [24, 60], [-13, 61], [-11, 61], [11, 61], [22, 61], [24, 61], [-13, 62], [12, 62], [13, 62], [14, 62], [23, 62], [24, 62], [-14, 63], [-13, 63], [14, 63], [33, 65], [34, 65], [27, 66], [28, 66], [33, 66], [34, 66], [27, 67], [28, 67], [32, 69], [33, 69], [35, 69], [33, 70], [35, 70], [34, 71], [33, 72], [34, 72], [33, 73], [34, 73], [33, 74], [34, 74]]

@@garden_of_eden_5 = [[-4, -5], [-3, -5], [-2, -5], [1, -5], [2, -5], [-4, -4],
                      [-3, -4], [-1, -4], [1, -4], [3, -4], [4, -4], [5, -4],
                      [-4, -3], [-3, -3], [-2, -3], [1, -3], [2, -3], [3, -3],
                      [4, -3], [5, -3], [-5, -2], [-3, -2], [-1, -2], [1, -2],
                      [3, -2], [5, -2], [-5, -1], [-4, -1], [-3, -1], [-2, -1],
                      [0, -1], [2, -1], [4, -1], [-1, 0], [0, 0], [1, 0], [-4, 1],
                      [-2, 1], [0, 1], [2, 1], [3, 1], [4, 1], [5, 1], [-5, 2],
                      [-3, 2], [-1, 2], [1, 2], [3, 2], [5, 2], [-5, 3], [-4, 3],
                      [-3, 3], [-2, 3], [-1, 3], [2, 3], [3, 3], [4, 3], [-5, 4],
                      [-4, 4], [-3, 4], [-1, 4], [1, 4], [3, 4], [4, 4], [-2, 5],
                      [-1, 5], [2, 5], [3, 5], [4, 5]]

@@cow = [[-30, -3], [-29, -3], [-21, -3], [-20, -3], [-17, -3], [-16, -3], [-13, -3], [-12, -3], [-9, -3], [-8, -3], [-5, -3], [-4, -3], [-1, -3], [0, -3], [3, -3], [4, -3], [-30, -2], [-29, -2], [-24, -2], [-22, -2], [-21, -2], [-20, -2], [-17, -2], [-16, -2], [-13, -2], [-12, -2], [-9, -2], [-8, -2], [-5, -2], [-4, -2], [-1, -2], [0, -2], [3, -2], [4, -2], [8, -2], [9, -2], [-26, -1], [-25, -1], [-23, -1], [7, -1], [9, -1], [-26, 0], [-25, 0], [-21, 0], [-20, 0], [-19, 0], [-18, 0], [-17, 0], [-16, 0], [-15, 0], [-14, 0], [-13, 0], [-12, 0], [-11, 0], [-10, 0], [-9, 0], [-8, 0], [-7, 0], [-6, 0], [-5, 0], [-4, 0], [-3, 0], [-2, 0], [-1, 0], [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [-26, 1], [-25, 1], [-23, 1], [8, 1], [-30, 2], [-29, 2], [-24, 2], [-22, 2], [-21, 2], [-20, 2], [-17, 2], [-16, 2], [-13, 2], [-12, 2], [-9, 2], [-8, 2], [-5, 2], [-4, 2], [-1, 2], [0, 2], [3, 2], [4, 2], [7, 2], [8, 2], [-30, 3], [-29, 3], [-21, 3], [-20, 3], [-17, 3], [-16, 3], [-13, 3], [-12, 3], [-9, 3], [-8, 3], [-5, 3], [-4, 3], [-1, 3], [0, 3], [3, 3], [4, 3]]


def gun() norm(@@gun, 10, 10) end  
def bigun() norm(@@bigun, 10, 10) end  
def pulsar() norm(@@pulsar, 10, 10) end  
def kokgalaxy() norm(@@kokgalaxy, 10, 10) end
def queen_bee_shuttle() norm(@@queen_bee_shuttle, 10, 10) end
def gunstar() norm(@@gunstar, 10, 10) end
def garden_of_eden_5() norm(@@garden_of_eden_5, 10, 10) end
def cow() norm(@@cow, 10, 10) end

def print(win, w)
  win.clear
  w.live_cells.each do |c|
    win.setpos(c.y, c.x)
    win.addch "*"
  end
  win.refresh
end


win = Curses.init_screen

# disable line buffering and handle Ctrl+Z and Ctrl+C manually - don't generate
# signals when these are pressed
# Curses.raw

# disable echoing of inputted characters
Curses.noecho
Curses.curs_set(0)

win.move(10, 10)

w = GameOfLife.new *cow
print(win, w)
i = 0
while i < 400
  sleep(0.1)
  i += 1
  w = w.tick
  print(win, w)
end



# draw on the screen
Curses.refresh

win.addstr "Type any character to finish"

# wait for a key press
Curses.getch
